"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearRequestTrackerCacheInfo = clearRequestTrackerCacheInfo;
exports.getRequestTrackerCacheInfo = getRequestTrackerCacheInfo;
exports.storeRequestTrackerCacheInfo = storeRequestTrackerCacheInfo;
function _logger() {
  const data = _interopRequireDefault(require("@parcel/logger"));
  _logger = function () {
    return data;
  };
  return data;
}
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * We keep track of the latest request tracker cache entry cache key.
 */
/**
 * On the FSCache implementation, only HEX strings are valid as keys.
 *
 * Non-hex strings will fail silently. That is a leaky abstraction and therefore
 * this function is required here to fix it.
 */
function toFsCacheKey(key) {
  let result = '';
  for (let i = 0; i < key.length; i += 1) {
    result += key.charCodeAt(i).toString(16);
  }
  return result;
}

/**
 * Retrieve the latest `RequestTrackerCacheInfo`. This should help debugging
 * tools like `parcel-query` find the latest cache entries for the request
 * graph.
 */
function getRequestTrackerCacheInfo(cache) {
  return cache.get(toFsCacheKey('RequestTrackerCacheInfo'));
}

/**
 * Store latest `RequestTrackerCacheInfo`, this contains the cache key for the
 * last request graph so that parcel-query can read it.
 */
async function storeRequestTrackerCacheInfo(cache, requestTrackerCacheInfo) {
  _logger().default.verbose({
    origin: '@parcel/core',
    message: `Storing RequestTrackerCache info`,
    meta: {
      requestGraphKey: requestTrackerCacheInfo.requestGraphKey,
      snapshotKey: requestTrackerCacheInfo.snapshotKey
    }
  });
  await cache.set(toFsCacheKey('RequestTrackerCacheInfo'), requestTrackerCacheInfo);
}

/**
 * When starting a build the request tracker cache keys are cleared.
 * This prevents dangling references from being present if the process exits
 * while writing the cache.
 */
async function clearRequestTrackerCacheInfo(cache) {
  await cache.set(toFsCacheKey('RequestTrackerCacheInfo'), null);
}